###################
# BUILD FOR LOCAL DEVELOPMENT
###################

FROM node:16.19-alpine As development

# Create app directory
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
# Copying this first prevents re-running npm install on every code change.
COPY --chown=node:node package*.json ./

#RUN apk add --update python3 make g++\ && rm -rf /var/cache/apk/*

# Install app dependencies using the `npm ci` command instead of `npm install`
RUN npm install
RUN apk update && apk add bash

# Bundle app source
COPY --chown=node:node . .
COPY .env .env
COPY ./scripts/wait-for.sh . 

# Use the node user from the image (instead of the root user)
USER node

###################
# BUILD FOR PRODUCTION
###################

FROM node:16.19-alpine As build

WORKDIR /usr/src/app

COPY --chown=node:node package*.json ./

COPY --chown=node:node --from=development /usr/src/app/node_modules ./node_modules

COPY --chown=node:node . .

# Run the build command which creates the production bundle
RUN npm run build

# Set NODE_ENV environment variable
ENV NODE_ENV production

#RUN apk add --update python3 make g++\ && rm -rf /var/cache/apk/*

# Running `npm ci` removes the existing node_modules directory and passing in --only=production ensures that only the production dependencies are installed. This ensures that the node_modules directory is as optimized as possible
RUN npm install --ignore-scripts=false --only=production && npm cache clean --force
RUN chmod +x ./scripts/wait-for.sh

USER node

###################
# PRODUCTION
###################

FROM node:16.19-alpine As production

# Copy the bundled code from the build stage to the production image
COPY --chown=node:node --from=build /usr/src/app/node_modules ./node_modules
COPY --chown=node:node --from=build /usr/src/app/dist ./dist

# Start the server using the production build

CMD [ "node", "dist/main.js" ]
EXPOSE 4000
